1. Terminal CD to where you want the Next.js app

2. Terminal npx create-next-app@latest
3. FOLLOW STEPS: 
(a). Yes
(b). Type in Name of App
(c). Typescript: No
(d). ESLint: Yes
(e). Tailwind CSS: Yes 
(f). 'src' directory: Yes 
(g). App Router: Yes
(h). Turbopack: Yes
(i). Cutomize import: No

4. *** OPEN in VS: Make Styled-components work
READ:
Styled-Components Registry in Next.js Explained
The registry file is necessary in Next.js for several important reasons:

Server-Side Rendering (SSR)

Next.js performs SSR by default
Styled-components needs special handling to work correctly with SSR
Without this registry, styles might "flash" unstyled content during page load
Style Sheet Management

The ServerStyleSheet class collects styles during server rendering
It ensures styles are properly injected before the content is sent to the browser
Prevents the "Flash of Unstyled Content" (FOUC)
Style Deduplication

The registry prevents duplicate styles from being created
Manages style injection across multiple renders
Optimizes performance by cleaning up styles when no longer needed

Without This Registry:
Styles might not load immediately
Components could appear unstyled briefly
SSR and client-side styles might conflict
Performance issues due to style duplication

=============

4: Add Files:
üìÅ src/
  üìÅ app/
    üìÅ lib/
      ‚îî‚îÄ‚îÄ registry.js
    üìÅ styles/
      ‚îî‚îÄ‚îÄ globalStyles.js
    ‚îî‚îÄ‚îÄ layout.js


===========
//path: src/app/styles/globalStyles.js

'use client'

import { createGlobalStyle } from 'styled-components'

const GlobalStyle = createGlobalStyle`
  * {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
  }

  body {
    font-family: 'Inter', sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
`

export default GlobalStyle
===========

//path: src/app/lib/registry.js

'use client'

import React, { useState } from 'react'
import { useServerInsertedHTML } from 'next/navigation'
import { ServerStyleSheet, StyleSheetManager } from 'styled-components'

export default function StyledComponentsRegistry({ children }) {
  const [styledComponentsStyleSheet] = useState(() => new ServerStyleSheet())

  useServerInsertedHTML(() => {
    const styles = styledComponentsStyleSheet.getStyleElement()
    styledComponentsStyleSheet.instance.clearTag()
    return <>{styles}</>
  })

  if (typeof window !== 'undefined') return <>{children}</>

  return (
    <StyleSheetManager sheet={styledComponentsStyleSheet.instance}>
      {children}
    </StyleSheetManager>
  )
}
=========

UPDATE layout.js:
//path: src/app/layout.js
import { Inter } from 'next/font/google'
import StyledComponentsRegistry from './lib/registry'
import GlobalStyle from './styles/globalStyles'

const inter = Inter({ subsets: ['latin'] })

export const viewport = {
  width: 'device-width',
  initialScale: 1,
  maximumScale: 1,
  userScalable: false,
  themeColor: '#33464f',
}

export const metadata = {
  title: 'Your App Name',
  description: 'Your app description here',
  manifest: '/manifest.json',
  icons: {
    icon: [
      { rel: 'icon', url: '/favicon.ico' },
      { rel: 'icon', url: '/favicon-32x32.png', sizes: '32x32', type: 'image/png' },
      { rel: 'icon', url: '/favicon-16x16.png', sizes: '16x16', type: 'image/png' },
    ],
    apple: [
      { url: '/apple-touch-icon.png' },
    ],
  },
}

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <StyledComponentsRegistry>
          <GlobalStyle />
          {children}
        </StyledComponentsRegistry>
      </body>
    </html>
  )
}
=========

DELETE globals.css is you wish

++++++++






ADMINISTRATOR ONLY:
READ: Metadata and App Configuration
In Next.js, instead of editing index.html directly, you configure metadata in your layout.js or page.js files. Create or modify your root layout file:

Administrator Only For Branding & Public Folder Updates:
1a. Delete the favicon.ico in src folder
2a. Public folder Add png files 
üìÅ public/
‚îú‚îÄ‚îÄ apple-touch-icon.png      (180x180)
‚îú‚îÄ‚îÄ favicon-16x16.png         (16x16)
‚îú‚îÄ‚îÄ favicon-32x32.png         (32x32)
‚îú‚îÄ‚îÄ favicon.ico               (64x64, 32x32, 24x24, 16x16)
‚îú‚îÄ‚îÄ file.svg                  (Next.js default)
‚îú‚îÄ‚îÄ globe.svg                 (Next.js default)
‚îú‚îÄ‚îÄ manifest.json            
‚îú‚îÄ‚îÄ next.svg                  (Next.js default)
‚îú‚îÄ‚îÄ robots.txt
‚îú‚îÄ‚îÄ vercel.svg                (Next.js default)
‚îî‚îÄ‚îÄ window.svg                (Next.js default)

3a. UPDATE layout.js file:
//path: src/app/layout.js
import { Inter } from 'next/font/google'
import './globals.css'

const inter = Inter({ subsets: ['latin'] })

export const viewport = {
  width: 'device-width',
  initialScale: 1,
  maximumScale: 1,
  userScalable: false,
  themeColor: '#33464f',
}

export const metadata = {
  title: 'Your App Name',
  description: 'Your app description here',
  manifest: '/manifest.json',
  icons: {
    icon: [
      { rel: 'icon', url: '/favicon.ico' },
      { rel: 'icon', url: '/favicon-32x32.png', sizes: '32x32', type: 'image/png' },
      { rel: 'icon', url: '/favicon-16x16.png', sizes: '16x16', type: 'image/png' },
    ],
    apple: [
      { url: '/apple-touch-icon.png' },
    ],
  },
}

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  )
}

4a. Update Your manifest.json:

//path: public/manifest.json
{
  "short_name": "Your App",
  "name": "Your Application Name",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "favicon-32x32.png",
      "sizes": "32x32",
      "type": "image/png"
    },
    {
      "src": "favicon-16x16.png",
      "sizes": "16x16",
      "type": "image/png"
    },
    {
      "src": "apple-touch-icon.png",
      "sizes": "180x180",
      "type": "image/png"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#33464f",
  "background_color": "#ffffff"
}
